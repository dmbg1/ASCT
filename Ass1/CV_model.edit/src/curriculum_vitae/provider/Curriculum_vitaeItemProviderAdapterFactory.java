/**
 */
package curriculum_vitae.provider;

import curriculum_vitae.util.Curriculum_vitaeAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Curriculum_vitaeItemProviderAdapterFactory extends Curriculum_vitaeAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Curriculum_vitaeItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link curriculum_vitae.CurriculumVitae} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CurriculumVitaeItemProvider curriculumVitaeItemProvider;

	/**
	 * This creates an adapter for a {@link curriculum_vitae.CurriculumVitae}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCurriculumVitaeAdapter() {
		if (curriculumVitaeItemProvider == null) {
			curriculumVitaeItemProvider = new CurriculumVitaeItemProvider(this);
		}

		return curriculumVitaeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link curriculum_vitae.Person} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PersonItemProvider personItemProvider;

	/**
	 * This creates an adapter for a {@link curriculum_vitae.Person}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPersonAdapter() {
		if (personItemProvider == null) {
			personItemProvider = new PersonItemProvider(this);
		}

		return personItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link curriculum_vitae.CitationName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CitationNameItemProvider citationNameItemProvider;

	/**
	 * This creates an adapter for a {@link curriculum_vitae.CitationName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCitationNameAdapter() {
		if (citationNameItemProvider == null) {
			citationNameItemProvider = new CitationNameItemProvider(this);
		}

		return citationNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link curriculum_vitae.Website} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WebsiteItemProvider websiteItemProvider;

	/**
	 * This creates an adapter for a {@link curriculum_vitae.Website}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWebsiteAdapter() {
		if (websiteItemProvider == null) {
			websiteItemProvider = new WebsiteItemProvider(this);
		}

		return websiteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link curriculum_vitae.Idiom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IdiomItemProvider idiomItemProvider;

	/**
	 * This creates an adapter for a {@link curriculum_vitae.Idiom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIdiomAdapter() {
		if (idiomItemProvider == null) {
			idiomItemProvider = new IdiomItemProvider(this);
		}

		return idiomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link curriculum_vitae.Degree} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DegreeItemProvider degreeItemProvider;

	/**
	 * This creates an adapter for a {@link curriculum_vitae.Degree}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDegreeAdapter() {
		if (degreeItemProvider == null) {
			degreeItemProvider = new DegreeItemProvider(this);
		}

		return degreeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link curriculum_vitae.Project} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProjectItemProvider projectItemProvider;

	/**
	 * This creates an adapter for a {@link curriculum_vitae.Project}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProjectAdapter() {
		if (projectItemProvider == null) {
			projectItemProvider = new ProjectItemProvider(this);
		}

		return projectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link curriculum_vitae.Affiliation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AffiliationItemProvider affiliationItemProvider;

	/**
	 * This creates an adapter for a {@link curriculum_vitae.Affiliation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAffiliationAdapter() {
		if (affiliationItemProvider == null) {
			affiliationItemProvider = new AffiliationItemProvider(this);
		}

		return affiliationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link curriculum_vitae.AffiliationField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AffiliationFieldItemProvider affiliationFieldItemProvider;

	/**
	 * This creates an adapter for a {@link curriculum_vitae.AffiliationField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAffiliationFieldAdapter() {
		if (affiliationFieldItemProvider == null) {
			affiliationFieldItemProvider = new AffiliationFieldItemProvider(this);
		}

		return affiliationFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link curriculum_vitae.Distinction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DistinctionItemProvider distinctionItemProvider;

	/**
	 * This creates an adapter for a {@link curriculum_vitae.Distinction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDistinctionAdapter() {
		if (distinctionItemProvider == null) {
			distinctionItemProvider = new DistinctionItemProvider(this);
		}

		return distinctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link curriculum_vitae.DistinctionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DistinctionTypeItemProvider distinctionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link curriculum_vitae.DistinctionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDistinctionTypeAdapter() {
		if (distinctionTypeItemProvider == null) {
			distinctionTypeItemProvider = new DistinctionTypeItemProvider(this);
		}

		return distinctionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link curriculum_vitae.Activity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityItemProvider activityItemProvider;

	/**
	 * This creates an adapter for a {@link curriculum_vitae.Activity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityAdapter() {
		if (activityItemProvider == null) {
			activityItemProvider = new ActivityItemProvider(this);
		}

		return activityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link curriculum_vitae.ActivityType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityTypeItemProvider activityTypeItemProvider;

	/**
	 * This creates an adapter for a {@link curriculum_vitae.ActivityType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityTypeAdapter() {
		if (activityTypeItemProvider == null) {
			activityTypeItemProvider = new ActivityTypeItemProvider(this);
		}

		return activityTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link curriculum_vitae.Technology} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TechnologyItemProvider technologyItemProvider;

	/**
	 * This creates an adapter for a {@link curriculum_vitae.Technology}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTechnologyAdapter() {
		if (technologyItemProvider == null) {
			technologyItemProvider = new TechnologyItemProvider(this);
		}

		return technologyItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (curriculumVitaeItemProvider != null) curriculumVitaeItemProvider.dispose();
		if (personItemProvider != null) personItemProvider.dispose();
		if (citationNameItemProvider != null) citationNameItemProvider.dispose();
		if (websiteItemProvider != null) websiteItemProvider.dispose();
		if (idiomItemProvider != null) idiomItemProvider.dispose();
		if (degreeItemProvider != null) degreeItemProvider.dispose();
		if (projectItemProvider != null) projectItemProvider.dispose();
		if (affiliationItemProvider != null) affiliationItemProvider.dispose();
		if (affiliationFieldItemProvider != null) affiliationFieldItemProvider.dispose();
		if (distinctionItemProvider != null) distinctionItemProvider.dispose();
		if (distinctionTypeItemProvider != null) distinctionTypeItemProvider.dispose();
		if (activityItemProvider != null) activityItemProvider.dispose();
		if (activityTypeItemProvider != null) activityTypeItemProvider.dispose();
		if (technologyItemProvider != null) technologyItemProvider.dispose();
	}

}
